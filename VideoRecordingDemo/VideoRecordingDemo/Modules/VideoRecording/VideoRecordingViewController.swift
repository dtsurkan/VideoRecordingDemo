//
//  VideoRecordingViewController.swift
//  VideoRecordingDemo
//
//  Created by Dima Tsurkan on 9/26/17.
//  Copyright (c) 2017 Dima Tsurkan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import AVFoundation

protocol VideoRecordingDisplayLogic: class {
    
}

class VideoRecordingViewController: UIViewController, VideoRecordingDisplayLogic {
    var interactor: VideoRecordingBusinessLogic?
    var router: (NSObjectProtocol & VideoRecordingRoutingLogic & VideoRecordingDataPassing)?
    
    lazy var cameraMan: CameraMan = {
        let man = CameraMan()
        man.delegate = self
        return man
    }()
    
    /// The `Timer` that defines video recording progress
    var progressTimer: Timer?
    
    /// The `CGfloat` that defines video recording progress rate (0...1)
    var progress: CGFloat = 0
    
    /// The video recording progress update step, in seconds
    let step = 0.05
    
    @IBOutlet weak var captureButton: CaptureButton!
    @IBOutlet weak var cameraView: CameraView!

    // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: Setup
  
    private func setup() {
        let viewController = self
        let interactor = VideoRecordingInteractor()
        let presenter = VideoRecordingPresenter()
        let router = VideoRecordingRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
    
    // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
        configureView()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.captureButton.progress = 0
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        progressTimer?.invalidate()
    }
    
    // MARK: - Internal
    
    private func configureView() {
        
         askPermission() // setup cameraMan here
        
        // set delegate to camera view
        cameraView.delegate = self
    }
    
    private func askPermission() {
        if Permission.Camera.hasPermission {
            cameraMan.setup()
        } else {
            Permission.Camera.request {
                if Permission.Camera.hasPermission {
                    self.cameraMan.setup()
                }
            }
        }
    }
    
    @objc private func updateProgress() {
        guard progress < 1 else {
            progressTimer?.invalidate()
            return
        }
        progress = progress + CGFloat(step/CameraMan.maxVideoDuration)
        captureButton.progress = progress
    }
    
    
    private func startVideoCapture() {
        guard let _ = cameraView.previewLayer else { return }
        
        UIView.animate(withDuration: 0.1, animations: {
            self.cameraView.shutterOverlayView.alpha = 1
        }, completion: { _ in
            UIView.animate(withDuration: 0.1, animations: {
                self.cameraView.shutterOverlayView.alpha = 0
            })
        })
        
        cameraMan.startVideoRecording()
    }
    
    private func stopVideoCapture() {
        guard let _ = cameraView.previewLayer else { return }
        
        UIView.animate(withDuration: 0.1, animations: {
            self.cameraView.shutterOverlayView.alpha = 1
        }, completion: { _ in
            UIView.animate(withDuration: 0.1, animations: {
                self.cameraView.shutterOverlayView.alpha = 0
            })
        })
        
        cameraView.stackView.startLoading()
        cameraMan.stopVideoRecording()
    }
    
    // MARK: - Actions
    
    @IBAction func camptureVideoButtonTouched(_ sender: UIButton) {
       progressTimer = .scheduledTimer(timeInterval: step,
                                        target: self,
                                        selector: #selector(updateProgress),
                                        userInfo: nil,
                                        repeats: true)
        startVideoCapture()
    }
    
    @IBAction func camptureVideoButtonReleased(_ sender: UIButton) {
        stopVideoCapture()
        progressTimer?.invalidate()
    }
}

// MARK: - CameraManDelegate

extension VideoRecordingViewController: CameraManDelegate {
    
    func cameraManDidStart(_ cameraMan: CameraMan) {
        cameraView.setupPreviewLayer(cameraMan.session)
    }
    
    func cameraMan(_ cameraMan: CameraMan, didChangeInput input: AVCaptureDeviceInput) {
        cameraView.flashButton.isHidden = !input.device.hasFlash
    }
    
    func cameraMan(_ cameraMan: CameraMan, didStopRecordingVideoAt url: URL) {
        cameraMan.saveVideo(at: url, location: nil)
    }
    
    func cameraMan(_ cameraMan: CameraMan, didSave video: Video?) {
        captureButton.progress = 0
        cameraView.stackView.stopLoading()
        if let video = video {
            Cart.shared.video = video
//            self.showPreview(Image(asset: video.asset, imageUI: nil))
        }
    }
    
}

// MARK: - CameraViewDelegate
extension VideoRecordingViewController: CameraViewDelegate {
    
    func cameraView(_ cameraView: CameraView, didTouch point: CGPoint) {
        cameraMan.focus(point)
    }
}
